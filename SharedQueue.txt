import java.util.LinkedList;
import java.util.Queue;

class SharedQueue {
    private final Queue<String> queue = new LinkedList<>();

    public synchronized void enqueue(String message) {
        queue.offer(message);
        notifyAll(); // Notify waiting consumers that a new message is available
    }

    public synchronized String dequeue() {
        while (queue.isEmpty()) {
            try {
                wait(); // Wait for a message to be available
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        return queue.poll();
    }
}

class Writer implements Runnable {
    private final SharedQueue sharedQueue;

    public Writer(SharedQueue sharedQueue) {
        this.sharedQueue = sharedQueue;
    }

    @Override
    public void run() {
        for (int i = 0; i < 5; i++) {
            String message = "Message " + (i + 1);
            sharedQueue.enqueue(message);
            try {
                Thread.sleep(200); // Simulate writer adding messages at a rate of 5 messages per second
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
}

class Reader implements Runnable {
    private final SharedQueue sharedQueue;
    private final int id;

    public Reader(SharedQueue sharedQueue, int id) {
        this.sharedQueue = sharedQueue;
        this.id = id;
    }

    @Override
    public void run() {
        while (true) {
            String message = sharedQueue.dequeue();
            System.out.println("Reader " + id + " received: " + message);
        }
    }
}

public class SharedQueueExample {
    public static void main(String[] args) {
        SharedQueue sharedQueue = new SharedQueue();

        // Create a single writer
        Thread writerThread = new Thread(new Writer(sharedQueue));
        writerThread.start();

        // Create 5 reader threads
        for (int i = 0; i < 5; i++) {
            Thread readerThread = new Thread(new Reader(sharedQueue, i + 1));
            readerThread.start();
        }
    }
}
